#!/bin/bash

MCV_PARAMS="$@"

DOCUMENT_DIRECTORY="${HOME}"
if [ `uname -s` = "Darwin" ]; then
  DOCUMENT_DIRECTORY="${HOME}/Documents"
fi

MCV_USERPATH="${DOCUMENT_DIRECTORY}/McIDAS-V"
MCV_LOGPATH="${MCV_USERPATH}/mcidasv.log"

USE_TEMPUSERPATH="0"

# Check for -userpath parameter
while [ "$1" != "" ]; do
  if [ "$1" = "-userpath" ]; then
    MCV_USERPATH="$2"
    shift
    shift
  elif [ "$1" = "-logpath" ]; then
    MCV_LOGPATH="$2"
    shift
    shift
  elif [ "$1" = "-tempuserpath" ]; then
    USE_TEMPUSERPATH="1"
    shift
  else
    shift
  fi
done

if [ "${MCV_USERPATH}" != "${DOCUMENT_DIRECTORY}/McIDAS-V" ]; then
  MCV_LOGPATH="${MCV_USERPATH}/mcidasv.log"
fi

if [ "${USE_TEMPUSERPATH}" = "1" ]; then
  # first command is for Linux; it'll fail on OS X and then attempt the second
  MCV_USERPATH=`mktemp -d 2>/dev/null || mktemp -d -t 'mcidasv'`
  echo "Using randomly generated userpath: ${MCV_USERPATH}"
  MCV_LOGPATH="${MCV_USERPATH}/mcidasv.log"
  MCV_PARAMS="${str// -tempuserpath/}"
fi

# Check for old style default userpath
if [ -d "${HOME}/.mcidasv" ]; then
  if [ ! -d "${MCV_USERPATH}" ]; then
    echo "Moving files to new user path: ${MCV_USERPATH}..."
    mv "${HOME}/.mcidasv" "${MCV_USERPATH}"
  fi
fi

# Change to the directory that the script resides in before executing
HAVEWHICH=`which which >/dev/null 2>&1`
if [ $? -eq 0 ]; then
  scriptname=`which "$0" 2>/dev/null`
else
  scriptname="$0"
fi
if [ -z "${scriptname}" ]; then
  scriptname="$0"
fi

dirname=`dirname "$scriptname"`
cd "$dirname/lib"

MCV_JAR=$(find . -maxdepth 1 -name "mcidasv*.jar" -print)

# Default heap size to use if none can be determined
HEAP_DEFAULT="512M"

# Controls whether or not the welcome window appears (0 = no, 1 = yes)
SHOW_WELCOME="0"

# TEMP: default value for enabling concurrent mark-sweep GC
# USE_CMSGC="0"

# TEMP?: default value for the visad.java3d.geometryByRef property
# GEOMETRY_BY_REF="true"

# Put the log files in the user's MCV_USERPATH directory (which should be writeable)
MCV_LOG="${MCV_USERPATH}/mcidasv.log"
MCV_LOG_LINES="10000"

# Always run the default prefs; user can override as much as they want
if [ ! -f "$dirname/runMcV.prefs" ]; then
  echo "This script must be run from within the McIDAS-V installation directory"
  exit 1
else
  . "$dirname/runMcV.prefs"
fi

# Create MCV_USERPATH directory if it doesn't already exist
if [ ! -d "${MCV_USERPATH}" ]; then
  mkdir -p "${MCV_USERPATH}"

  # toggle the welcome window
  SHOW_WELCOME="1"
elif [ "${USE_TEMPUSERPATH}" = "1" ]; then
  # temporary userpath will already exist, but we still need to show the 
  # welcome window?
  SHOW_WELCOME="1"
fi

# Copy prefs to MCV_USERPATH directory if it doesn't already exist
if [ ! -f "${MCV_USERPATH}/runMcV.prefs" ]; then
  cp runMcV.prefs "${MCV_USERPATH}/runMcV.prefs"
fi

# If MCV_USERPATH/runMcV.prefs exists, source it to populate the current environment
if [ -f "${MCV_USERPATH}/runMcV.prefs" ]; then
  . "${MCV_USERPATH}/runMcV.prefs"
fi

if [ "${USE_3DSTUFF}" = "1" ]; then
  IDV_3D="true"
else
  IDV_3D="false"
fi

# Check for valid heap size
HEAP_PERCENT=0
HAS_PERCENT=`echo "${HEAP_SIZE}" |grep [pP%]`
if [ -n "${HAS_PERCENT}" ]; then
  HEAP_PERCENT=`echo "${HEAP_SIZE}" |sed -e 's/[pP%]//'`
fi
HAS_ALPHA=`echo "${HEAP_SIZE}" |grep [a-zA-Z%]`
if [ -z "${HAS_ALPHA}" ]; then
  HEAP_SIZE="${HEAP_SIZE}M"
fi

# Point at McV's bundled JRE on OS X. 
if [ `uname -s` = "Darwin" ]; then
  JAVA_HOME="$PWD/.install4j/jre.bundle/Contents/Home/jre"
fi

# Look for java
JAVA_BIN="java"
if [ -f "./jre/bin/java" ]; then
  JAVA_HOME="$PWD/jre"
fi

if [ -n "${JAVA_HOME}" ]; then
  JAVA_BIN="${JAVA_HOME}/bin/java"
else
  # try to infer JAVA_HOME...
  JAVA_PATH=$(which java)
  JAVA_HOME=$(readlink -f ${JAVA_PATH} | sed "s:/bin/java::")
fi

# Get the version and amount of system memory
echo "Reading system configuration..."

# We have system memory, so try to set heap size if a percent was requested
if [ ${HEAP_PERCENT} -gt 0 ]; then
  SYS_MEM=`"${JAVA_BIN}" -Dmcv.userpath=\"${MCV_USERPATH}\" -cp $MCV_JAR edu.wisc.ssec.mcidasv.util.GetMem 2>/dev/null`
  echo "sys mem: ${SYS_MEM}"
  if [ ${SYS_MEM} -gt 0 ]; then
    HEAP_SIZE=$(( ${SYS_MEM} * ${HEAP_PERCENT} / 100 ))
    HEAP_SIZE="${HEAP_SIZE}M"
  else
    HEAP_SIZE="${HEAP_DEFAULT}"
  fi
fi

# get the default bundle represented so that Mcv can use it
if [ -n "${STARTUP_BUNDLE}" ]; then
    # the existence check is now handled within mcidasv
    DEFAULT_BUNDLE="-bundle \"${STARTUP_BUNDLE}\""
else
    DEFAULT_BUNDLE=""
fi

# if the user has disabled loading layout.mcv we need to pass -nodefault
if [ "${DEFAULT_LAYOUT}" = "0" ]; then
    USE_LAYOUT_BUNDLE="-nodefault"
else
    USE_LAYOUT_BUNDLE=""
fi

# TEMP!: toggles the CMS collector
if [ "${USE_CMSGC}" = "1" ]; then
    GC_ARGS="-XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled"
else
    GC_ARGS=""
fi

# TEMP?: toggles the visad.java3d.geometryByRef property
if [ "${USE_GEOBYREF}" = "0" ]; then
    GEOMETRY_BY_REF="false"
else
    GEOMETRY_BY_REF="true"
fi

# toggles the visad.java3d.imageByRef property
if [ "${USE_IMAGEBYREF}" = "0" ]; then
    IMAGE_BY_REF="false"
else
    IMAGE_BY_REF="true"
fi

# toggles non-power of two textures
if [ "${USE_NPOT}" = "0" ]; then
    ALLOW_NPOT="false"
else
    ALLOW_NPOT="true"
fi

# control the logging level for McV's "root" logger.
if [ -n "${LOG_LEVEL}" ]; then
    LOGGING_LEVEL="${LOG_LEVEL}"
else
    LOGGING_LEVEL="INFO"
fi

# allow the user to supply args to the JVM. caveat emptor!
if [ -n "${JVM_OPTIONS}" ]; then
    JVM_ARGS="${JVM_OPTIONS}"
else
    JVM_ARGS=""
fi

# allow user to control textureWidthMax values
if [ -n "${TEXTURE_WIDTH}" ]; then
  TEXTURE_SIZE="${TEXTURE_WIDTH}"
else
  TEXTURE_SIZE="4096"
fi

LOGBACK_CONFIG="${MCV_USERPATH}/logback.xml"

# Gather up previously set values.
MCV_USERPATH_ESCAPED=`echo ${MCV_USERPATH} |sed -e 's/ /\\\\ /g'`

JAVA_FLAGS="-Xmx${HEAP_SIZE} ${INIT_HEAP} ${THREAD_STACK} ${YOUNG_GEN} ${GC_ARGS} ${JVM_ARGS} ${MCV_EXTDIR} ${MCV_LIBPATH} -Dloglevel=\"${LOGGING_LEVEL}\" -Dlogback.configurationFile=\"${LOGBACK_CONFIG}\" -Dmcv.userpath=\"${MCV_USERPATH}\" -Dmcv.logpath=\"${MCV_LOGPATH}\" -Dfile.encoding=UTF-8 -Dpython.security.respectJavaAccessibility=false"
MCV_FLAGS="${COLLAB_MODE} ${COLLAB_PORT} ${ENABLE_DEBUG} -Dvisad.java3d.noerasebackground=true -Dvisad.java3d.textureNpot=${ALLOW_NPOT} -Dvisad.java3d.imageByRef=${IMAGE_BY_REF} -Dvisad.java3d.geometryByRef=${GEOMETRY_BY_REF} -Didv.3d=${IDV_3D} -DtextureWidthMax=${TEXTURE_SIZE}"

# should mcv show the welcome window prior to starting
if [ "${SHOW_WELCOME}" = "1" ]; then
  if [ "${MCV_UNWELCOME_WINDOW}" = "true" ]; then
      MCV_FLAGS="-welcomewindow -autoquit ${MCV_UNWELCOME_DELAY} ${MCV_FLAGS}"
  else
      MCV_FLAGS="-welcomewindow ${MCV_FLAGS}"
  fi
fi

MCV_FLAGS="${MCV_FLAGS} -userpath \"${MCV_USERPATH}\" ${USE_LAYOUT_BUNDLE} ${DEFAULT_BUNDLE}"

# Run it
EXEC_CMD="\"$JAVA_BIN\" $JAVA_FLAGS -jar $MCV_JAR $MCV_FLAGS $MCV_PARAMS"
echo "${EXEC_CMD}"
eval "${EXEC_CMD}"
