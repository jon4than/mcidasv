#!/bin/sh

# _file "path" : print the file of a path.
function _file(){
    printf '%s' "${1##*/}"
}

# _cd "path" : change the directory of a path.
function _cd(){
    cd "$(printf '%s' "${1%/*}")" 2>/dev/null
}

# get_realpath "path" : echo the realpath as logical or physical.
function get_realpath(){
    # 0 : Good.
    # 1 : Fail : no file/symlink broken/not regular file errors.
    # 2 : Fail : unspecified physical file path construction error.
    # 3 : Fail : unspecified logical or physical directory construction error. 
    [[ ! -f "$1" ]] && return 1 # Code 1.
    if [[ -z "$no_symlinks" ]]
    then
        local _pwd='pwd'
    else
        local _pwd='pwd -P'
        if [[ -L "$1" ]]
        then
            local _ls="$( ls -dl "$1" 2>/dev/null )" &&
            local _link="$( printf '%s' "${_ls#*"${1} -> "}" )" &&
            echo "$( _cd "$1"; _cd "$_link" && $_pwd )"/"$(_file "$_link")" && return 0 || return 2 # Code 2.
        fi
    fi
    echo "$( _cd "$1"; $_pwd )"/"$(_file "$1")" && return 0 || return 3 # Code 3.
}

scriptname=$(get_realpath "$0")
dirname=$(dirname "$scriptname")

cd "$dirname/lib"

MCV_JAR=$(find . -maxdepth 1 -name "mcidasv*.jar" -print)

# Point at McV's bundled JRE on OS X. 
if [ `uname -s` = "Darwin" ]; then
  JAVA_HOME="$dirname/.install4j/jre.bundle/Contents/Home/jre"
fi

# Look for java
JAVA_BIN="java"
if [ -f "$dirname/jre/bin/java" ]; then
  JAVA_HOME="$dirname/jre"
fi

if [ -n "${JAVA_HOME}" ]; then
  JAVA_BIN="${JAVA_HOME}/bin/java"
else
  # try to infer JAVA_HOME...
  JAVA_PATH=$(which java)
  JAVA_HOME=$(readlink -f ${JAVA_PATH} | sed "s:/bin/java::")
fi

${JAVA_BIN} -classpath "${MCV_JAR}" edu.wisc.ssec.mcidasv.util.J3dTest